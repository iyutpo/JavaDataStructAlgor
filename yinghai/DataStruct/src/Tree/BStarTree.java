package Tree;


/*
* B*tree：
*   B* tree 是B+tree的变形，
*                                   +---------------+
*                                   |  [5, 20, 65]  |
*                                   |  P1, P2, P3   |
*                                   +---------------+
*                   /                       |                       \
*     +---------------+             +---------------+               +---------------+
*     |  [5, 20, 65]  |     ┎------>|  [5, 20, 65]  |      ┎------->|  [5, 20, 65]  |
*     | P1, P2, P3, Q-|-----┘       | P1, P2, P3, Q-|------┘        | P1, P2, P3, Q |
*     +---------------+             +---------------+               +---------------+
*    /       |        \             /       |       \               /       |        \
*  +---+   +---+    +----+       +---+    +---+    +---+         +---+    +---+     +---+
*  | 5 |   | 10|    | 20 |       | 28|    | 35|    | 56|         | 65|    | 80|     | 90|
*  | 8 |   | 15|    | 26 |       | 30|    | 38|    | 60|         | 73|    | 85|     | 96|
*  | 9 |   | 18|    | 27 |       | 33|    | 55|    | 63|         | 79|    | 88|     | 99|
*  | Q |-->| Q |--->| Q  |------>| Q |--->| Q |--->| Q |-------->| Q |--->| Q |---->| Q |
*  +---+   +---+    +----+       +---+    +---+    +---+         +---+    +---+     +---+
*
* B*tree说明：
*   1. B*tree 定义了非叶节点 关键字书至少为  (2/3) * M 个，即 块的最低使用率为 2/3。而B+tree的 块 的最低使用率为 1/2
*   2. 从第 1 个特点我们可以看出，B*tree 分配新节点的概率比 B+tree要低，空间使用率更高。
*
* 我们用 普通的BST 来对比一下 B*tree：
*   我们知道，B类树（B-tree，B+tree和B*tree）都是为了 降低 BST 相对较高的深度而存在的
* */

public class BStarTree {
}
