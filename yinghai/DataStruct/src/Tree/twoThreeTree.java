package Tree;


/*
* 2-3 树： 2-3树是 最简单的B-tree，有如下几个特点：
*   1. 2-3树 所有的叶节点 都在同一层（所有的B-tree都满足这个特点）
*   2. 有两个 子节点的节点 叫做 二节点，有三个 子节点的节点 叫做 三节点
*   3. 没有节点的节点 既可以是 二节点也可以是三节点
*   4. 2-3树 是仅由 二节点和三节点构成的树
*   对于一个 三节点，该三节点[12, 13]，它的左节点的值要小于 12， 中节点的值要介于12和13之间；它的右节点要大于13.
*
* 我们接下来来实现一下 2-3树。要实现2-3树，需要实现一个 insert 函数。插入函数的规则如下：
*   1. 当按照 2-3 树上面的4个规则进行插入时，如果不能满足某一个要求，就需要拆分，先向上拆分，如果上层已满，则拆分本层，拆分后仍然需要满足上面四个条件
*   2. 对于三节点的子树，值的大小仍然要遵守 BST 的规则
* 我们来看一个案例，了解一下insert操作是如何执行的
*   int[] arr = {16, 24, 12, 32, 14, 26, 34, 10, 8, 28, 38, 20}
*   (1). insert 16  ===>    [16]
*   (2). insert 24  ===>    [16, 24]
*   (3). insert 12  ===>   这里注意，不能直接插入到[16, 24]的左子节点，因为这样就只有1个子节点，不满足 2-3树的要求。所以要分开[16,24]:
*               [16]
*           /          \
*        [12]           [24]
*   (4). insert 32  ===> 因为 32的值很大，所以可以插入到[24]节点的后边：
*               [16]
*           /          \
*        [12]           [24, 32]
*   (5). insert 14  ===> 这时不难看出14既可以插入[16]也可以[12]。但我们优先插入到下层，所以有：
*               [16]
*           /          \
*        [12, 14]     [24, 32]
*   (6). insert 26  ===> 此时理想的位置是 [24, 26, 32]，但不满足2-3树的条件。而且也不能放到[24, 32]的下面，所以需要向上拆分，得到：
*              [16, 26]
*        /        |        \
* [12, 14]      [24]         [32]
*   (7). insert 34  ===>  不难看出34要放在[32]之后：
*              [16, 26]
*        /        |        \
* [12, 14]      [24]       [32, 34]
*   (8). insert 10  ===>  10 的理想位置应该是在 12前面，但这也不满足2-3树。根据之前的经验，我们需要拆分[12, 14]，得到
*                  [16, 26]
*            /        |        \
*         [12]      [24]       [32, 34]
*       /      \
*    [10]      [14]
*    但是这样做也不满足2-3树的条件，因为 所有的叶节点不在同一层。这时，我们不仅需要拆分[12, 14]节点，还需要拆分[32, 34]和[16, 26]节点：
*                  [16]
*            /              \
*         [12]                [26]
*       /      \            /      \
*    [10]      [14]       [24]     [32, 34]
*   (9). insert 8  ===>  比较简单，直接插入到[10]：
*                  [16]
*            /              \
*         [12]                [26]
*       /      \            /      \
* [8, 10]      [14]       [24]     [32, 34]
*   (10). insert 28  ===>   比较简单，直接作为[26]的中节点即可：
*                  [16]
*            /              \
*         [12]                  [26]
*       /      \            /     |     \
* [8, 10]      [14]       [24]   [28]   [32, 34]
*   (11). insert 38  ===>   比较简单，直接插入到[32, 34]后面，并将[32]放入[26]之后：
*                  [16]
*            /                \
*         [12]                  [26, 32]
*       /      \            /     |     \
* [8, 10]      [14]       [24]   [28]   [34, 38]
*   (12). insert 20  ===> 首先20 > 16，所以向 16 的右子树找。20 < 26，所以要放到 [24]之前：
*                     [16]
*               /                \
*            [12]                  [26, 32]
*          /      \            /     |     \
*    [8, 10]      [14]   [20, 24]   [28]   [34, 38]
*
* */
public class twoThreeTree {
}
